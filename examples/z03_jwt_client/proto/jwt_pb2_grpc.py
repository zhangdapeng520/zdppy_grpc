# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import jwt_pb2 as jwt__pb2


class ServerJwtStub(object):
    """Jwt身份校验服务
    服务名
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateToken = channel.unary_unary(
                '/ServerJwt/CreateToken',
                request_serializer=jwt__pb2.CreateTokenRequest.SerializeToString,
                response_deserializer=jwt__pb2.CreateTokenResponse.FromString,
                )
        self.ParseToken = channel.unary_unary(
                '/ServerJwt/ParseToken',
                request_serializer=jwt__pb2.ParseTokenRequest.SerializeToString,
                response_deserializer=jwt__pb2.ParseTokenResponse.FromString,
                )
        self.RefreshToken = channel.unary_unary(
                '/ServerJwt/RefreshToken',
                request_serializer=jwt__pb2.RefreshTokenRequest.SerializeToString,
                response_deserializer=jwt__pb2.RefreshTokenResponse.FromString,
                )


class ServerJwtServicer(object):
    """Jwt身份校验服务
    服务名
    """

    def CreateToken(self, request, context):
        """创建token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseToken(self, request, context):
        """解析token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshToken(self, request, context):
        """刷新token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerJwtServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateToken,
                    request_deserializer=jwt__pb2.CreateTokenRequest.FromString,
                    response_serializer=jwt__pb2.CreateTokenResponse.SerializeToString,
            ),
            'ParseToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseToken,
                    request_deserializer=jwt__pb2.ParseTokenRequest.FromString,
                    response_serializer=jwt__pb2.ParseTokenResponse.SerializeToString,
            ),
            'RefreshToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshToken,
                    request_deserializer=jwt__pb2.RefreshTokenRequest.FromString,
                    response_serializer=jwt__pb2.RefreshTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerJwt', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerJwt(object):
    """Jwt身份校验服务
    服务名
    """

    @staticmethod
    def CreateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerJwt/CreateToken',
            jwt__pb2.CreateTokenRequest.SerializeToString,
            jwt__pb2.CreateTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ParseToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerJwt/ParseToken',
            jwt__pb2.ParseTokenRequest.SerializeToString,
            jwt__pb2.ParseTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerJwt/RefreshToken',
            jwt__pb2.RefreshTokenRequest.SerializeToString,
            jwt__pb2.RefreshTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
